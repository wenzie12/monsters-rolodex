{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","concat","monster","id","alt","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","search_box_component_SearchBox","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAGaA,qBAAO,SAAAC,GAAK,OACxBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAAMO,QAAQC,GAAxC,0BAAoEC,IAAI,YAChFR,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQG,MACnBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMO,QAAQI,UCHPC,EAAW,SAAAZ,GACtB,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbJ,EAAMa,SAASC,IAAI,SAACP,GAAD,OACnBN,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKT,EAAQC,GAAID,QAASA,QCLvBU,SAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAaC,EAAhBF,EAAgBE,aAAhB,OACxBnB,EAAAC,EAAAC,cAAA,SACCC,UAAU,SACViB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCGG,cApCd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAeDP,aAAe,SAAAW,GACdP,EAAKQ,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftCX,EAAKY,MAAQ,CACZvB,SAAU,GACVoB,YAAa,IAJDT,mFAUM,IAAAa,EAAAV,KACnBW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAU,CAAEnB,SAAU6B,uCAOlC,IAAAC,EAC0BhB,KAAKS,MAA/BvB,EADA8B,EACA9B,SAAUoB,EADVU,EACUV,YACZW,EAAmB/B,EAASgC,OAAO,SAAAtC,GAAO,OAC/CA,EAAQG,KAAKoC,cAAcC,SAASd,EAAYe,uBAGjD,OACC/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAC8C,EAAD,CAAW9B,YAAY,cAAcC,aAAcO,KAAKP,eACxDnB,EAAAC,EAAAC,cAAC+C,EAAD,CAAUrC,SAAU+B,YA/BNO,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.b5358709.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n\t<div className='card-container'>\r\n\t\t<img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n\t\t<h2>{props.monster.name}</h2>\r\n\t\t<p>{props.monster.email}</p>\r\n\t</div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => {\r\n\t return (\r\n\t\t<div className='card-list'>\r\n\t\t\t{props.monsters.map((monster) => (\r\n\t\t\t\t<Card key={monster.id} monster={monster}/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t )\r\n}","import React from 'react';\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) =>  (\r\n\t<input\r\n\t\tclassName=\"search\"\r\n\t\ttype=\"search\"\r\n\t\tplaceholder={placeholder}\r\n\t\tonChange={handleChange}\r\n\t/>\r\n)","import React, { Component } from 'react';\nimport './App.css';\n\n//components\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: ''\n\t\t}\n\n\t\t// this.handleChange = this.handleChange.bind(this);\n\t}\n\t\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(users => this.setState( { monsters: users }))\n\t}\n\n\thandleChange = e => {\n\t\tthis.setState({ searchField: e.target.value });\n\t}\n\n\trender() {\n\t\tconst { monsters, searchField } = this.state\n\t\tconst filteredMonsters = monsters.filter(monster => \n\t\t\tmonster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n\t\t\t);\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1> Monster Rolodex</h1>\n\t\t\t\t<SearchBox placeholder=\"search here\" handleChange={this.handleChange}/>\n\t\t\t\t<CardList monsters={filteredMonsters}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n\n\n/*\nto connect to github, upload static pages\n\nfirst, on github: create a repository by clicking on the \"+\" icon and select create repository.\n\ttype in name of the repo, then save it, then copy the link provided..\n\non gitbash:\n\ttype in ->\n\t\tgit remote add origin <paste github link here>\n\t\tgit remote add origin https://github.com/wenzie12/monsters-rolodex.git\n\t\n\t<then hit enter (make sure you are in the right directory)\n\t\n\tthen type -> yarn add gh-pages\n\t\n\t<then hit enter>\n\nafter this... go to package.json file and edit the following:\n\n\n  \"name\": \"monsters-rolodex\",\n  \"version\": \"0.1.0\",\n\t\"private\": true,\n\t\"homepage\": \"https://wenzie12.github.io/monsters-rolodex\",   // <- add this line of code like this: \"https://<your github username>.github.io/<repo name>\"\n  \"dependencies\": {\n    \"react\": \"^16.9.0\",\n    \"react-dom\": \"^16.9.0\",\n    \"react-scripts\": \"3.0.1\"\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n\t\t\"eject\": \"react-scripts eject\",\n\t\t\"predeploy\": \"yarn build\",  // <-- add this line,\n\t\t\"deploy\": \"gh-pages -d build\" // <-- add this line,\n  },\n\n\nthen on terminal (gitbash), type in:\n\tyarn deploy\n\n\t\t*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}